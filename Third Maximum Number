Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

=========================================
Sol:

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        long int first_max=-1000000000000;
        long int second_max=-1000000000000;
        long int third_max=-1000000000000;
        for(int i=0;i<nums.size();i++){
            if(first_max<nums[i]){
                third_max=second_max;
                second_max=first_max;
                first_max=nums[i];
            }
            else if(second_max<nums[i] && nums[i]!=first_max){
                third_max=second_max;
                second_max=nums[i];
            }
            else if(third_max<nums[i] && nums[i]!=second_max && nums[i]!=first_max){
                third_max=nums[i];
            }
        }
        if(third_max!=-1000000000000){
            return third_max;
        }
        else return first_max;
    }
};
