Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

 



The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

 

Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

================================
Sol: two pointers

class Solution {
public:
    int maxArea(vector<int>& height) {
        int a_pointer=0;
        int b_pointer=height.size()-1;
        int mx_area=0;
        while(a_pointer<b_pointer){
            if(height[a_pointer]<height[b_pointer]){
                mx_area=max(mx_area,((b_pointer-a_pointer)*height[a_pointer]));
                a_pointer++;
            }
            else{
                mx_area=max(mx_area,((b_pointer-a_pointer)*height[b_pointer]));
                b_pointer--;
            }
        }
        return mx_area;
    }
};
