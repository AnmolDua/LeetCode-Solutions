Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

================================
Sol:
class Solution {
public:
    string frequencySort(string s) {
        map<char,int> m;
        priority_queue<pair<int,char>,vector<pair<int,char>>> max_heap;
        for(char &x:s){
            m[x]++;
        }
        for(auto &freq:m){
            max_heap.push({freq.second,freq.first});
        }
        string m1="";
        while(!max_heap.empty()){
            int freq=max_heap.top().first;
            char x1=max_heap.top().second;
            for(int i=0;i<freq;i++){
              m1+=x1;  
            }
            max_heap.pop();
        }
        return m1;
    }
};
