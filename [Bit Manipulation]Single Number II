Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,3,2]
Output: 3
Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

===============================================
Sol1:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int a=0,b=0;
        for(int i=0;i<nums.size();i++){
            b= ~a & (b^nums[i]);
            a= ~b & (a^nums[i]);
        }
        return b;
    }
};

Sol2:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
    int cnt,res=0; 
    for(int i=0;i<32;i++){
        cnt=0;
        for(int num:nums){
            cnt+=((num>>i)&1);
        }
        if(cnt%3){res|=(1<<i);}
     }
        return res;
    }
};
