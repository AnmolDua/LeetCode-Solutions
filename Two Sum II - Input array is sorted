Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

====================================================
Sol: Array sorted : therefore using two pointer 

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
     vector<int> a;
     int a_pointer =0;
     int b_pointer = numbers.size()-1;
    while(a_pointer<b_pointer){
        int sum=numbers[a_pointer]+numbers[b_pointer];
        if(sum>target){b_pointer--;}
        else if(sum<target){a_pointer++;}
        else if(sum==target){a.push_back(a_pointer+1);a.push_back(b_pointer+1); return a; }
    }
        return a;
    }
};
