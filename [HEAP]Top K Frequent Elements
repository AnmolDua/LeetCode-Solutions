Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

========================================
Sol:

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        map<int,int> m;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>min_heap;
        for(int i:nums){
            m[i]++;
        }
        vector<int>v;
        for(auto it=m.begin();it!=m.end();it++){
            if(min_heap.size()<k){
                min_heap.push({it->second,it->first});
            }
            else{
                if(min_heap.top().first<it->second){
                    min_heap.pop();
                    min_heap.push({it->second,it->first});
                }
            }
        }
        while(!min_heap.empty()){
            v.push_back(min_heap.top().second);
            min_heap.pop();
        }
        return v;
    }
};
