Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.

====================================================================================
Sol:

class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        int pos_pointer=0;
        int neg_pointer=0;
        vector<int> v;
        while(pos_pointer < A.size() && A[pos_pointer]<0){
            pos_pointer++;
        }
        int cnt=0;
        neg_pointer=pos_pointer-1;
        while(pos_pointer<A.size() && neg_pointer>=0){
            if(A[pos_pointer]*A[pos_pointer]<=(A[neg_pointer]*A[neg_pointer])){
                v.push_back(A[pos_pointer]*A[pos_pointer]);
                pos_pointer++;
            }
            else {
                v.push_back(A[neg_pointer]*A[neg_pointer]);
                neg_pointer--;
            }
        }
        while(neg_pointer>=0){
           v.push_back(A[neg_pointer]*A[neg_pointer]);
           neg_pointer--;
    
        }
        while(pos_pointer<A.size()){
            v.push_back(A[pos_pointer]*A[pos_pointer]);
            pos_pointer++;
       
        }
       return v; 
    }
};
